[user]
	name = Bilal Syed Hussain
    semail = bh246@st-andrews.ac.uk
    bemail = bilalshussain@gmail.com
	email = bh246@st-andrews.ac.uk

[color]
    ui = auto

[core]
	excludesfile = /Users/bilalh/.gitignore

[alias]
    b = branch
    c = commit
    d = describe
    p = push
    st = status
    ca = commit -am
    cam = commit --amend -am
    ch = checkout
    pom = push origin master
    ldiff = difftool -t latex

    rmdel = !git ls-files -dz | xargs -0 git rm

  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

    # Logs
    lg = log --graph --pretty=format:'%Cred%an%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --date=relative
    ld = log --graph --pretty=format:'%Cred%an%Creset -%C(yellow)%d%Creset %s %Cgreen(%ai)%Creset'
    lo = log --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cr) %C(bold blue)<%an>%Creset %s %C(yellow)%d%Creset ' --abbrev-commit --date=relative

    # One line per commit
    loa = log --graph --decorate --pretty=oneline --abbrev-commit --all

    # commits not pushed to $1
    unpushed = cherry -v

    # what tag contains the sha
    tag = name-rev --name-only

    # what branch contains the sha
    contains = branch --contains

    # lost commits
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    # show a list of branches sorted by time of last commit
    brage = "!f() { git for-each-ref --sort=committerdate refs/heads $1 --format=\"%(refname:short)\" ; }; g() { for C in $(f $1) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset $C\" \"$C\" -- ; done; }; g "

    # show remote branches as well
    brageall = !git brage refs/remotes

    # show a list of tags sorted by when they were tagged
    tagage = "!sh -c 'git for-each-ref --sort=taggerdate refs/tags --format=\"%(refname:short)\"'"

    # show a list of every branch and show there latests commit, sorted by last commit
    brlog = "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\") ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset $C\" \"$C\" -- ; git show -s $C ; echo; done'"
    # url of origin, about 99% of what I use git config --list for
    cloneurl = config --get remote.origin.url

    shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
	create-gitignore = "!gi() { curl http://www.gitignore.io/api/$@ ;}; gi"

[core]
    pager = less -FRSX
    quotepath = false
	editor = /Users/bilalh/bin/vim

[apply]
    whitespace = fix

[gist]
    private = yes
    browse  = yes

[diff]
    tool   = icdiff

[difftool]
    prompt = no

[difftool.latex]
    cmd = latexdiff  \"$LOCAL\" \"$REMOTE\"

[difftool.icdiff]
    cmd = icdiff --line-numbers  \"$LOCAL\" \"$REMOTE\"

[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool "sourcetree"]
	cmd = /Applications/DiffMerge.app/Contents/MacOS/DiffMerge --nosplash \"$LOCAL\" \"$REMOTE\"
	path = 

[mergetool "sourcetree"]
	cmd = /Applications/DiffMerge.app/Contents/MacOS/DiffMerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
	trustExitCode = true

[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustExitCode = true

[credential]
    helper = osxkeychain

[push]
    default = simple
